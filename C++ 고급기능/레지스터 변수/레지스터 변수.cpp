#include <iostream>

using namespace std;

// 레지스터 변수

// 레지스터는 컴퓨터 안에 위치하고 있는 작고 빠른 메모리 공간을 의미한다
// 인텔 펜티엄과 같은 32비트 CPU의 경우에는 32비트(4바이트) 크기의 레지스터들을 가지고 있다
// 레지스터는 도마와 같은 역활을 한다 음식 재료를 도마 위에 올려 다듬는 것처럼
// 메모리에 있는 데이터를 꺼내와서 레지스터 위에 올려놓은 뒤에 데이터를 사용하게 된다

int main()
{
	// 지금까지 배운 변수들은 메모리에 자신의 값을 보관했지만 레지스터 변수는 레지스터에 보관한다
	// 그렇기 때문에 레지스터 변수에 값을 읽고 쓰는 것은 훨씬 빠르게 동작한다
	// 냉장고에서 꺼내 올 필요 없이 바로 도마 위에서 작업을 시작할 수 있기 때문이다
	// 예를 들어 빠른 수행을 필요로 하는 반복 명령이 있다면 다음과 같이 할 수 있다
	register int i = 0;

	while (i < 1000000)
	{
		// 중간 코드 생략
		cout << i << endl;
		++i;
	}

	// register 키워드를 사용해서 변수를 정의하면 레지스터 변수를 만들 수 있는데 그렇다고 항상 되는 건 아니고 
	// register 키워드를 사용한다는 것은 컴퓨터야 가능하다면 이 변수를 레지스터 변수로 만들어다오 라고 말하는 셈이므로 여분의 레지스터가 없다면 거절 당할 수도 있다
	// 그런데 현실적으로 레지스터 변수를 사용할 일은 그렇게 많지 않다
	// 레지스터 변수를 쓸 만큼 수행시간에 민감한 코드를 작성할 일이 별로 없거니와
	// 요즘의 컴파일러들은 모두 똑똑하기 때문에 반복명령에 쓰이는 변수들은 알아서 레지스터 변수로 만들어준다
	// 값을 보관하는 위치는 다르지만 레지스터 변수 역시 지역 변수의 한 종류이기 때문에 같은 함수에서만 접근이 가능하며 함수가 종료될 때 소멸한다
	// (레지스터 변수는 전역 변수로 선언할 수 없다)

	return 0;
}

// 형식을 지정하는 입출력
// C 스타일의 입출력을 위한 함수 역시 여러 가지가 있는데
// 그 중에서도 대표적인 printf() 와 scanf() 함수가 있다
// printf()와 scanf()는 입출력 형식을 지정하는 동시에 입출력을 수행하는 함수다
// C++ 스타일과는 전혀 다른 방식을 사용하는데 개인적으로 이 함수들을 사용하는 것이 더욱 편할 때도 많다

// 형식 지정
// printf()는 출력 scanf()는 입력에 사용하는 함수인데 이 함수를 사용하기 위해서는 <cstdio> 헤더파일을 포함해야한다
// 우선 printf()와 scanf() 함수의 사용법으로 다음과 같이 선언해준다
// printf("입력하실 문자 : %d %d %f",a,b,c);
// scanf("%d %d %f",&a,&b,&f);

// 기본적인 메커니즘은 %d, %f 처럼 특수한 문자가 위치하는 곳에 변수의 값을 출력하거나 입력 받는 것이다
// 예를 들어 %d는 정수를, %f는 실수를 의미하는 특수 문자가 된다
// 차례대로 '첫번째 %d 에는 a'가 '두번째 %d 에는 b'가 '세번째 %f 에는 c'가 매칭된다
// 여러 특수 문자가 있으며 이 특수 문자들은 출력할 값의 타립 뿐만 아니라 출력 형식까지도 결정하는 역할을 한다
// 예를 들어 정수를 16진수로 출력한다거나 실수를 1.23E+6 처럼 출력하는 것도 모두 특수 문자를 사용해서 지정할 수 있다
// (특수 문자의 종류는 인터넷과 책887p를 참고한다)

// 또한 특수 문자에 부가적인 옵션을 지정함으로써 보다 세세한 형식을 지정할 수 있다
// 예를 들어 %와 특수 문자 사이에 숫자를 적어주면 cout.width()를 호출한 것과 비슷한 효과를 낼 수 있다

// 정수를 10칸에 걸쳐서 출력하고 싶다면 %d 대신에 %10d 라고 적어주면 된다
// printf("%10d",333) // __________333 출력

// 또한 앞쪽의 빈칸을 0으로 채우고 싶다면 %010d 라고 해주면 되고
// printf("%010d",333) // 0000000000333 출력

// 양수인 경우에 + 기호를 출력하고 싶다면 %+10d 처럼,
// printf("%+10d",333) // __________+333 출력

// 값을 왼쪽에 정렬해서 출력하고 싶다면 %-10d 처럼 할 수 있다
// printf("%-10d",333) // 333__________ 출력

// 실수의 경우에는 소수점 이하 자리 수를 제한하기 위해서 %.2f 처럼 할 수 있는데
// 여기서 .2 는 소수점 이하 둘째 자리까지만 출력하게 만든다(C++ 스타일과 마찬가지로 소수점 이하 자리가 반올림된다)
// printf("%.2f",12.345678) // 12.35 출력

// scanf()의 경우에는 인자로 주소 값을 넘겨야 한다
// scanf()는 값을 읽어 오기 위한 함수기 때문에 입력 값을 보관할 변수의 주소를 넘겨주어야 한다
// scanf()가 만들어질 당시에는 레퍼런스가 없었으므로 포인터를 사용하는 것이다

// 주의
// 특수 문자와 실제 인자의 타입이 맞지 않는 경우
// 예를 들어 다음과 같이 printf() 함수를 호출한 경우를 생각해보자
// printf("%c",12.34);
// 인자로는 double 타입을 넘겨주었는데 %c를 사용하고 있다
// 이런 실수를 했을 때는 최악의 경우 프로그램이 비정상 종료하는 상황까지 갈 수 있다
// 중요한건 컴파일러가 위와 같은 코드에 대해 아무런 오류 메시지를 출력하지 않는다는 점이다
// 그렇기 때문에 printf() 나 scanf() 함수를 사용할 때는 주의할 필요가 있다
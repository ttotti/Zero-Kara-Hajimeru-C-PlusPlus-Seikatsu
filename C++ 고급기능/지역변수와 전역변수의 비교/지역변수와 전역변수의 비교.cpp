#include <iostream>

using namespace std;

/* 지역 변수
   접근 범위 : 지역 변수를 정의한 함수에서만 접근할 수 있음

   존속 기간 : 지역 변수가 정의될 때 생성, 함수가 종료될 때 소멸된다
			   객체의 경우는 해당하는 시점에서 생성자와 소멸자가 호출된다

      초기화 : 지역 변수는 초기화를 하지 않은 경우 쓰레기 값을 갖게 된다
	  
   자동 변수 : 지역 변수는 자동 변수(
   
   
   Variables)라는 이름으로 불리기도 한다
			   함수를 종료할 때 자동으로 소멸된다는 점에서 이해할 수 있을 것이다
			   C++에는 auto 라는 키워드가 존재하며 'int local' 는 'auto int local' 라고 써도 무방하다*/

/* 전역 변수
   접근 범위 : 전역 변수를 정의한 파일에 있는 모든 함수에서 접근 할 수 있음
			   (주의: 다른 파일에서도 접근 할 수 있는 방법이 존재한다)

   존속 기간 : 프로그램이 시작할 때 생성, 프로그램이 종료할 때 소멸된다
			   객체의 경우는 해당하는 시점에서 생성자와 소멸자가 호출된다

	  초기화 : 전역 변수는 초기화를 수행하지 않더라도 0값을 갖는다*/
			   

// 전역 변수
// 전역 변수는 같은 파일 내의 모든 함수에서 접근이 가능하다
int global = 10;

void MyFunction();

int main()
{
	// 지역 변수
	// 함수 안에서 정의된 변수를 지역 변수라 한다
	int local = 20;

	// 전역 변수에 접근
	global = 100;

	// 자신의 지역 변수에 접근
	local = 200;

	// 함수 호출
	MyFunction();

	// 블록 안에서 정의한 변수
	// 블록 안에서의 지역 변수이다 
	// 접근 또한 정의한 블록 안에서만 가능하다
	// 이 블록의 실행이 끝나면 블록 안에서 정의한 변수들은 소멸된다
	// 이것을 if/else, for, while, try/catch, switch/case 등의 명령에서도 중괄호로 블록을 만들어서 사용하는데
	// 이 블록들 안에서 정의한 변수들도 방금 설명한 규칙을 따른다
	{
		// 블록 안의 지역 변수
		int val = 100;

		// 접근 성공
		val = 200;

		// 실행이 끝나고 블록을 나갈때 지역 변수 소멸
	}

	// val = 100; 접근 실패

	// 다른 영역에 정의된 변수의 이름이 중복되는 경우
	// 변수를 정의하는 영역이 다르다면 변수의 이름이 같아도 무방하다
	// 다시 말해서 같은 이름의 변수가 여려 개 존재할 수 있다는 뜻인데 코드가 길어지거나 하면 헷갈릴수 있다
	int val = 100;

	// for 문 안에서 초기 값을 적어주는 부분에서도 변수는 for 명령 안쪽으로 제한된다
	for (int i = 0; i < 100; i++)
	{
		i = 0;
	}

	// for 명령에서 초기 값으로 정의된 변수에 접근
	// 하지만 오래된 컴파일러들은 그 변수들이 for 명령 밖에서도 살아있게 만든다 (주의하자!)
	// i = 100; 오류

	return 0;
}

void MyFunction()
{
	// 전역 변수에 접근
	global = 100; // 성공

	// 다른 함수의 지역 변수에 접근
	// 다른 함수에서 정의한 지역 변수에 접근하는 것은 불가능 하다
	// local = 200; 오류
}